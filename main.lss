
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000a6a  00000afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800122  00800122  00000b20  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ec  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abb  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fc  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073a  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000243  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b7  00000000  00000000  000024a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  9e:	0c 94 33 05 	jmp	0xa66	; 0xa66 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ports_init>:
					  0b01000,
					  0b00000
					  };

void ports_init(void){
LCD_RS_DDR|=(1<<LCD_RS);
  a6:	38 9a       	sbi	0x07, 0	; 7
LCD_E_DDR |=(1<<LCD_E);
  a8:	39 9a       	sbi	0x07, 1	; 7
LCD_D4_DDR|=(1<<LCD_D4);
  aa:	3a 9a       	sbi	0x07, 2	; 7
LCD_D5_DDR|=(1<<LCD_D5);
  ac:	3b 9a       	sbi	0x07, 3	; 7
LCD_D6_DDR|=(1<<LCD_D6);
  ae:	3c 9a       	sbi	0x07, 4	; 7
LCD_D7_DDR|=(1<<LCD_D7);
  b0:	3d 9a       	sbi	0x07, 5	; 7
LCD_RS_PORT&=~(1<<LCD_RS);
  b2:	40 98       	cbi	0x08, 0	; 8
LCD_E_PORT &=~(1<<LCD_E);
  b4:	41 98       	cbi	0x08, 1	; 8
}
  b6:	08 95       	ret

000000b8 <cmd_4_bit>:

void cmd_4_bit(uint8_t cmd){
if(cmd & 0x01){LCD_D4_PORT|=(1<<LCD_D4);}else{LCD_D4_PORT&=~(1<<LCD_D4);}
  b8:	80 ff       	sbrs	r24, 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <cmd_4_bit+0x8>
  bc:	42 9a       	sbi	0x08, 2	; 8
  be:	01 c0       	rjmp	.+2      	; 0xc2 <cmd_4_bit+0xa>
  c0:	42 98       	cbi	0x08, 2	; 8
if(cmd & 0x02){LCD_D5_PORT|=(1<<LCD_D5);}else{LCD_D5_PORT&=~(1<<LCD_D5);}
  c2:	81 ff       	sbrs	r24, 1
  c4:	02 c0       	rjmp	.+4      	; 0xca <cmd_4_bit+0x12>
  c6:	43 9a       	sbi	0x08, 3	; 8
  c8:	01 c0       	rjmp	.+2      	; 0xcc <cmd_4_bit+0x14>
  ca:	43 98       	cbi	0x08, 3	; 8
if(cmd & 0x04){LCD_D6_PORT|=(1<<LCD_D6);}else{LCD_D6_PORT&=~(1<<LCD_D6);}
  cc:	82 ff       	sbrs	r24, 2
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <cmd_4_bit+0x1c>
  d0:	44 9a       	sbi	0x08, 4	; 8
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <cmd_4_bit+0x1e>
  d4:	44 98       	cbi	0x08, 4	; 8
if(cmd & 0x08){LCD_D7_PORT|=(1<<LCD_D7);}else{LCD_D7_PORT&=~(1<<LCD_D7);}
  d6:	83 ff       	sbrs	r24, 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <cmd_4_bit+0x26>
  da:	45 9a       	sbi	0x08, 5	; 8
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <cmd_4_bit+0x28>
  de:	45 98       	cbi	0x08, 5	; 8
LCD_E_PORT |=(1<<LCD_E);
  e0:	41 9a       	sbi	0x08, 1	; 8
LCD_E_PORT &=~(1<<LCD_E);
  e2:	41 98       	cbi	0x08, 1	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	80 ea       	ldi	r24, 0xA0	; 160
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <cmd_4_bit+0x30>
_delay_ms(2);
}
  ec:	08 95       	ret

000000ee <lcd_send>:

void lcd_send(uint8_t mode, uint8_t cmd){
  ee:	1f 93       	push	r17
  f0:	16 2f       	mov	r17, r22
if(mode==1){LCD_RS_PORT|=(1<<LCD_RS);}else{LCD_RS_PORT&=~(1<<LCD_RS);}
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	11 f4       	brne	.+4      	; 0xfa <lcd_send+0xc>
  f6:	40 9a       	sbi	0x08, 0	; 8
  f8:	01 c0       	rjmp	.+2      	; 0xfc <lcd_send+0xe>
  fa:	40 98       	cbi	0x08, 0	; 8
cmd_4_bit(cmd>>4);
  fc:	81 2f       	mov	r24, r17
  fe:	82 95       	swap	r24
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
cmd_4_bit(cmd);
 106:	81 2f       	mov	r24, r17
 108:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
}
 10c:	1f 91       	pop	r17
 10e:	08 95       	ret

00000110 <lcd_pos>:

void lcd_pos(uint8_t x,uint8_t y){
 110:	98 2f       	mov	r25, r24
if     (y==1){lcd_send(0,0x80+0x00+x-1);}
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	31 f4       	brne	.+12     	; 0x122 <lcd_pos+0x12>
 116:	91 58       	subi	r25, 0x81	; 129
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	69 2f       	mov	r22, r25
 11c:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 120:	08 95       	ret
else if(y==2){lcd_send(0,0x80+0x40+x-1);}
 122:	62 30       	cpi	r22, 0x02	; 2
 124:	29 f4       	brne	.+10     	; 0x130 <lcd_pos+0x20>
 126:	91 54       	subi	r25, 0x41	; 65
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	69 2f       	mov	r22, r25
 12c:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 130:	08 95       	ret

00000132 <lcd_custom_char>:
}

void lcd_custom_char(void){
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
lcd_send(0,0x40);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	60 e4       	ldi	r22, 0x40	; 64
 13a:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d1 e0       	ldi	r29, 0x01	; 1
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	69 91       	ld	r22, Y+
 146:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	c0 32       	cpi	r28, 0x20	; 32
 14e:	d8 07       	cpc	r29, r24
 150:	c1 f7       	brne	.-16     	; 0x142 <lcd_custom_char+0x10>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcd_cc>:

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
 158:	e6 2f       	mov	r30, r22
lcd_char[x-1+(y-1)*16]=cc;
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	94 e0       	ldi	r25, 0x04	; 4
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	9a 95       	dec	r25
 164:	e1 f7       	brne	.-8      	; 0x15e <lcd_cc+0x6>
 166:	eb 5c       	subi	r30, 0xCB	; 203
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	e8 0f       	add	r30, r24
 16c:	f1 1d       	adc	r31, r1
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	40 83       	st	Z, r20
}
 172:	08 95       	ret

00000174 <lcd_backlight>:

void lcd_backlight(uint8_t bcklt){
OCR0A=bcklt;
 174:	87 bd       	out	0x27, r24	; 39
}
 176:	08 95       	ret

00000178 <lcd_contrast>:

void lcd_contrast(uint8_t cntrst){
OCR0B=cntrst;
 178:	88 bd       	out	0x28, r24	; 40
}
 17a:	08 95       	ret

0000017c <lcd_init>:

void lcd_init(void){
LCD_V0_DDR |=(1<<LCD_V0_PWM);
 17c:	55 9a       	sbi	0x0a, 5	; 10
LCD_LED_DDR|=(1<<LCD_LED_PWM);
 17e:	56 9a       	sbi	0x0a, 6	; 10
TCCR0A  =(1<<COM0B1)|(1<<COM0A1)|(1<<WGM00)|(1<<WGM01);
 180:	83 ea       	ldi	r24, 0xA3	; 163
 182:	84 bd       	out	0x24, r24	; 36
TCCR0B  =(1<<CS01);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	85 bd       	out	0x25, r24	; 37
OCR0B   =10;
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	88 bd       	out	0x28, r24	; 40
OCR0A   =10;
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	84 ef       	ldi	r24, 0xF4	; 244
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	28 ec       	ldi	r18, 0xC8	; 200
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <lcd_init+0x1a>
_delay_ms(50);
ports_init();
 1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <ports_init>
 1a4:	88 e8       	ldi	r24, 0x88	; 136
 1a6:	93 e1       	ldi	r25, 0x13	; 19
 1a8:	28 ec       	ldi	r18, 0xC8	; 200
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <lcd_init+0x30>
_delay_ms(500);
cmd_4_bit(0x03);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
 1bc:	8c ed       	ldi	r24, 0xDC	; 220
 1be:	95 e0       	ldi	r25, 0x05	; 5
 1c0:	28 ec       	ldi	r18, 0xC8	; 200
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1cc:	d9 f7       	brne	.-10     	; 0x1c4 <lcd_init+0x48>
_delay_ms(150);
cmd_4_bit(0x03);
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	28 ec       	ldi	r18, 0xC8	; 200
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <lcd_init+0x60>
_delay_ms(50);
cmd_4_bit(0x03);
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
cmd_4_bit(0x02);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <cmd_4_bit>
lcd_send(0,0x28);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	68 e2       	ldi	r22, 0x28	; 40
 1f6:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x01);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 202:	84 ef       	ldi	r24, 0xF4	; 244
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	28 ec       	ldi	r18, 0xC8	; 200
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 210:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 212:	d9 f7       	brne	.-10     	; 0x20a <lcd_init+0x8e>
_delay_ms(50);
lcd_send(0,0x02);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x08);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	68 e0       	ldi	r22, 0x08	; 8
 220:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x0C);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	6c e0       	ldi	r22, 0x0C	; 12
 228:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x06);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	66 e0       	ldi	r22, 0x06	; 6
 230:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x10);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	60 e1       	ldi	r22, 0x10	; 16
 238:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
lcd_send(0,0x80);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	60 e8       	ldi	r22, 0x80	; 128
 240:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 244:	88 e8       	ldi	r24, 0x88	; 136
 246:	93 e1       	ldi	r25, 0x13	; 19
 248:	28 ec       	ldi	r18, 0xC8	; 200
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <lcd_init+0xd0>
_delay_ms(500);
lcd_custom_char();
 256:	0e 94 99 00 	call	0x132	; 0x132 <lcd_custom_char>
lcd_send(0,0x01);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
}
 262:	08 95       	ret

00000264 <lcd_blank>:

void lcd_blank(void){
 264:	e5 e4       	ldi	r30, 0x45	; 69
 266:	f1 e0       	ldi	r31, 0x01	; 1
for(uint8_t i=0;i<32;i++){lcd_char[i]=' ';}
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	81 93       	st	Z+, r24
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	e5 36       	cpi	r30, 0x65	; 101
 270:	f9 07       	cpc	r31, r25
 272:	d9 f7       	brne	.-10     	; 0x26a <lcd_blank+0x6>
}
 274:	08 95       	ret

00000276 <lcd_print_number>:

void lcd_print_number(uint8_t x,uint8_t y,uint32_t number){
 276:	9f 92       	push	r9
 278:	af 92       	push	r10
 27a:	bf 92       	push	r11
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	df 93       	push	r29
 28a:	cf 93       	push	r28
 28c:	00 d0       	rcall	.+0      	; 0x28e <lcd_print_number+0x18>
 28e:	00 d0       	rcall	.+0      	; 0x290 <lcd_print_number+0x1a>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	98 2e       	mov	r9, r24
 296:	a6 2e       	mov	r10, r22
 298:	79 01       	movw	r14, r18
 29a:	8a 01       	movw	r16, r20
uint8_t  num[4],dgt=0;
uint32_t n=number;
if(n!=0){
 29c:	21 15       	cp	r18, r1
 29e:	31 05       	cpc	r19, r1
 2a0:	41 05       	cpc	r20, r1
 2a2:	51 05       	cpc	r21, r1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <lcd_print_number+0x32>
 2a6:	4f c0       	rjmp	.+158    	; 0x346 <lcd_print_number+0xd0>
 2a8:	ca 01       	movw	r24, r20
 2aa:	b9 01       	movw	r22, r18
 2ac:	bb 24       	eor	r11, r11
  while(n!=0){n/=10;dgt++;}
 2ae:	2a e0       	ldi	r18, 0x0A	; 10
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
 2ba:	c9 01       	movw	r24, r18
 2bc:	da 01       	movw	r26, r20
 2be:	bc 01       	movw	r22, r24
 2c0:	cd 01       	movw	r24, r26
 2c2:	b3 94       	inc	r11
 2c4:	61 15       	cp	r22, r1
 2c6:	71 05       	cpc	r23, r1
 2c8:	81 05       	cpc	r24, r1
 2ca:	91 05       	cpc	r25, r1
 2cc:	81 f7       	brne	.-32     	; 0x2ae <lcd_print_number+0x38>
 2ce:	6e 01       	movw	r12, r28
 2d0:	08 94       	sec
 2d2:	c1 1c       	adc	r12, r1
 2d4:	d1 1c       	adc	r13, r1
 2d6:	cb 0c       	add	r12, r11
 2d8:	d1 1c       	adc	r13, r1
 2da:	17 c0       	rjmp	.+46     	; 0x30a <lcd_print_number+0x94>
  for(int i=(dgt-1);i>-1;i--){num[i]=(number%10)+48;number/=10;}
 2dc:	c8 01       	movw	r24, r16
 2de:	b7 01       	movw	r22, r14
 2e0:	2a e0       	ldi	r18, 0x0A	; 10
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
 2ec:	60 5d       	subi	r22, 0xD0	; 208
 2ee:	f6 01       	movw	r30, r12
 2f0:	60 83       	st	Z, r22
 2f2:	c8 01       	movw	r24, r16
 2f4:	b7 01       	movw	r22, r14
 2f6:	2a e0       	ldi	r18, 0x0A	; 10
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
 302:	c9 01       	movw	r24, r18
 304:	da 01       	movw	r26, r20
 306:	7c 01       	movw	r14, r24
 308:	8d 01       	movw	r16, r26
 30a:	08 94       	sec
 30c:	c1 08       	sbc	r12, r1
 30e:	d1 08       	sbc	r13, r1
 310:	cc 16       	cp	r12, r28
 312:	dd 06       	cpc	r13, r29
 314:	19 f7       	brne	.-58     	; 0x2dc <lcd_print_number+0x66>
 316:	9e 01       	movw	r18, r28
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	ea 2d       	mov	r30, r10
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	44 e0       	ldi	r20, 0x04	; 4
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	4a 95       	dec	r20
 32a:	e1 f7       	brne	.-8      	; 0x324 <lcd_print_number+0xae>
 32c:	e9 0d       	add	r30, r9
 32e:	f1 1d       	adc	r31, r1
 330:	ec 5b       	subi	r30, 0xBC	; 188
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	d9 01       	movw	r26, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <lcd_print_number+0xc6>
  for(uint8_t i=0;i<dgt;i++){lcd_char[i+x-1+(y-1)*16]=num[i];}
 338:	8d 91       	ld	r24, X+
 33a:	81 93       	st	Z+, r24
 33c:	8a 2f       	mov	r24, r26
 33e:	82 1b       	sub	r24, r18
 340:	8b 15       	cp	r24, r11
 342:	d0 f3       	brcs	.-12     	; 0x338 <lcd_print_number+0xc2>
 344:	0e c0       	rjmp	.+28     	; 0x362 <lcd_print_number+0xec>
  }
else{lcd_char[x-1+(y-1)*16]=48;}
 346:	e6 2f       	mov	r30, r22
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	24 e0       	ldi	r18, 0x04	; 4
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	2a 95       	dec	r18
 352:	e1 f7       	brne	.-8      	; 0x34c <lcd_print_number+0xd6>
 354:	eb 5c       	subi	r30, 0xCB	; 203
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	e8 0f       	add	r30, r24
 35a:	f1 1d       	adc	r31, r1
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	80 83       	st	Z, r24
}
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	9f 90       	pop	r9
 380:	08 95       	ret

00000382 <Iron_temp>:

void Iron_temp(uint8_t x, uint8_t y, uint16_t temp){
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	18 2f       	mov	r17, r24
 38e:	7a 01       	movw	r14, r20
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 390:	c6 2f       	mov	r28, r22
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	54 e0       	ldi	r21, 0x04	; 4
 396:	cc 0f       	add	r28, r28
 398:	dd 1f       	adc	r29, r29
 39a:	5a 95       	dec	r21
 39c:	e1 f7       	brne	.-8      	; 0x396 <Iron_temp+0x14>
 39e:	cb 5c       	subi	r28, 0xCB	; 203
 3a0:	de 4f       	sbci	r29, 0xFE	; 254
 3a2:	fe 01       	movw	r30, r28
 3a4:	e8 0f       	add	r30, r24
 3a6:	f1 1d       	adc	r31, r1
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 83       	st	Z, r24
else{lcd_char[x-1+(y-1)*16]=48;}
}

void Iron_temp(uint8_t x, uint8_t y, uint16_t temp){
lcd_cc(x,y,1);
lcd_print_number(x+2,y,temp);
 3ae:	97 01       	movw	r18, r14
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	81 2f       	mov	r24, r17
 3b6:	8e 5f       	subi	r24, 0xFE	; 254
 3b8:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_print_number>
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
 3bc:	84 e6       	ldi	r24, 0x64	; 100
 3be:	e8 16       	cp	r14, r24
 3c0:	f1 04       	cpc	r15, r1
 3c2:	40 f0       	brcs	.+16     	; 0x3d4 <Iron_temp+0x52>
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 3c4:	1b 5f       	subi	r17, 0xFB	; 251
 3c6:	fe 01       	movw	r30, r28
 3c8:	e1 0f       	add	r30, r17
 3ca:	f1 1d       	adc	r31, r1
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	10 82       	st	Z, r1

void Iron_temp(uint8_t x, uint8_t y, uint16_t temp){
lcd_cc(x,y,1);
lcd_print_number(x+2,y,temp);
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
else if(temp>9){lcd_cc(x+4,y,0);lcd_cc(x+5,y,'C');}
 3d0:	1f 5f       	subi	r17, 0xFF	; 255
 3d2:	0c c0       	rjmp	.+24     	; 0x3ec <Iron_temp+0x6a>
 3d4:	81 2f       	mov	r24, r17
 3d6:	8c 5f       	subi	r24, 0xFC	; 252
 3d8:	9a e0       	ldi	r25, 0x0A	; 10
 3da:	e9 16       	cp	r14, r25
 3dc:	f1 04       	cpc	r15, r1
 3de:	48 f0       	brcs	.+18     	; 0x3f2 <Iron_temp+0x70>
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 3e0:	fe 01       	movw	r30, r28
 3e2:	e8 0f       	add	r30, r24
 3e4:	f1 1d       	adc	r31, r1
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	10 82       	st	Z, r1
lcd_cc(x,y,1);
lcd_print_number(x+2,y,temp);
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
else if(temp>9){lcd_cc(x+4,y,0);lcd_cc(x+5,y,'C');}
else{lcd_cc(x+3,y,0);lcd_cc(x+4,y,'C');}
}
 3ea:	1b 5f       	subi	r17, 0xFB	; 251
 3ec:	c1 0f       	add	r28, r17
 3ee:	d1 1d       	adc	r29, r1
 3f0:	08 c0       	rjmp	.+16     	; 0x402 <Iron_temp+0x80>
 3f2:	1d 5f       	subi	r17, 0xFD	; 253
 3f4:	fe 01       	movw	r30, r28
 3f6:	e1 0f       	add	r30, r17
 3f8:	f1 1d       	adc	r31, r1
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	10 82       	st	Z, r1
 3fe:	c8 0f       	add	r28, r24
 400:	d1 1d       	adc	r29, r1
 402:	21 97       	sbiw	r28, 0x01	; 1
 404:	83 e4       	ldi	r24, 0x43	; 67
 406:	88 83       	st	Y, r24
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	08 95       	ret

00000414 <Set_temp>:

void Set_temp(uint8_t x, uint8_t y, uint16_t temp){
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	18 2f       	mov	r17, r24
 420:	7a 01       	movw	r14, r20
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 422:	c6 2f       	mov	r28, r22
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	74 e0       	ldi	r23, 0x04	; 4
 428:	cc 0f       	add	r28, r28
 42a:	dd 1f       	adc	r29, r29
 42c:	7a 95       	dec	r23
 42e:	e1 f7       	brne	.-8      	; 0x428 <Set_temp+0x14>
 430:	cb 5c       	subi	r28, 0xCB	; 203
 432:	de 4f       	sbci	r29, 0xFE	; 254
 434:	fe 01       	movw	r30, r28
 436:	e8 0f       	add	r30, r24
 438:	f1 1d       	adc	r31, r1
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	80 83       	st	Z, r24
else{lcd_cc(x+3,y,0);lcd_cc(x+4,y,'C');}
}

void Set_temp(uint8_t x, uint8_t y, uint16_t temp){
lcd_cc(x,y,3);
lcd_print_number(x+2,y,temp);
 440:	9a 01       	movw	r18, r20
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	81 2f       	mov	r24, r17
 448:	8e 5f       	subi	r24, 0xFE	; 254
 44a:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_print_number>
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
 44e:	84 e6       	ldi	r24, 0x64	; 100
 450:	e8 16       	cp	r14, r24
 452:	f1 04       	cpc	r15, r1
 454:	40 f0       	brcs	.+16     	; 0x466 <Set_temp+0x52>
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 456:	1b 5f       	subi	r17, 0xFB	; 251
 458:	fe 01       	movw	r30, r28
 45a:	e1 0f       	add	r30, r17
 45c:	f1 1d       	adc	r31, r1
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	10 82       	st	Z, r1

void Set_temp(uint8_t x, uint8_t y, uint16_t temp){
lcd_cc(x,y,3);
lcd_print_number(x+2,y,temp);
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
else if(temp>9){lcd_cc(x+4,y,0);lcd_cc(x+5,y,'C');}
 462:	1f 5f       	subi	r17, 0xFF	; 255
 464:	0c c0       	rjmp	.+24     	; 0x47e <Set_temp+0x6a>
 466:	81 2f       	mov	r24, r17
 468:	8c 5f       	subi	r24, 0xFC	; 252
 46a:	9a e0       	ldi	r25, 0x0A	; 10
 46c:	e9 16       	cp	r14, r25
 46e:	f1 04       	cpc	r15, r1
 470:	48 f0       	brcs	.+18     	; 0x484 <Set_temp+0x70>
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 472:	fe 01       	movw	r30, r28
 474:	e8 0f       	add	r30, r24
 476:	f1 1d       	adc	r31, r1
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	10 82       	st	Z, r1
lcd_cc(x,y,3);
lcd_print_number(x+2,y,temp);
if(temp>99){lcd_cc(x+5,y,0);lcd_cc(x+6,y,'C');}
else if(temp>9){lcd_cc(x+4,y,0);lcd_cc(x+5,y,'C');}
else{lcd_cc(x+3,y,0);lcd_cc(x+4,y,'C');}
}
 47c:	1b 5f       	subi	r17, 0xFB	; 251
 47e:	c1 0f       	add	r28, r17
 480:	d1 1d       	adc	r29, r1
 482:	08 c0       	rjmp	.+16     	; 0x494 <Set_temp+0x80>
 484:	1d 5f       	subi	r17, 0xFD	; 253
 486:	fe 01       	movw	r30, r28
 488:	e1 0f       	add	r30, r17
 48a:	f1 1d       	adc	r31, r1
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	10 82       	st	Z, r1
 490:	c8 0f       	add	r28, r24
 492:	d1 1d       	adc	r29, r1
 494:	21 97       	sbiw	r28, 0x01	; 1
 496:	83 e4       	ldi	r24, 0x43	; 67
 498:	88 83       	st	Y, r24
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	08 95       	ret

000004a6 <PWM_out>:

void PWM_out(uint8_t x, uint8_t y, uint16_t temp){
 4a6:	9a 01       	movw	r18, r20
lcd_send(0,0x40);
for(uint8_t i=0;i<32;i++){lcd_send(1,c_char[i]);}
}

void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
 4a8:	e6 2f       	mov	r30, r22
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	a4 e0       	ldi	r26, 0x04	; 4
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	aa 95       	dec	r26
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <PWM_out+0x8>
 4b6:	eb 5c       	subi	r30, 0xCB	; 203
 4b8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ba:	e8 0f       	add	r30, r24
 4bc:	f1 1d       	adc	r31, r1
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	90 83       	st	Z, r25
else{lcd_cc(x+3,y,0);lcd_cc(x+4,y,'C');}
}

void PWM_out(uint8_t x, uint8_t y, uint16_t temp){
lcd_cc(x,y,2);
lcd_print_number(x+2,y,temp);
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	8e 5f       	subi	r24, 0xFE	; 254
 4ca:	0e 94 3b 01 	call	0x276	; 0x276 <lcd_print_number>
}
 4ce:	08 95       	ret

000004d0 <lcd_print>:

void lcd_print(void){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
lcd_pos(1,1);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	0e 94 88 00 	call	0x110	; 0x110 <lcd_pos>
 4dc:	c5 e4       	ldi	r28, 0x45	; 69
 4de:	d1 e0       	ldi	r29, 0x01	; 1
for(uint8_t i=0;i<16;i++){lcd_send(1,lcd_char[i]);}
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	69 91       	ld	r22, Y+
 4e4:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	c5 35       	cpi	r28, 0x55	; 85
 4ec:	d8 07       	cpc	r29, r24
 4ee:	c1 f7       	brne	.-16     	; 0x4e0 <lcd_print+0x10>
lcd_pos(1,2);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	62 e0       	ldi	r22, 0x02	; 2
 4f4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_pos>
for(uint8_t i=0;i<16;i++){lcd_send(1,lcd_char[i+16]);}
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	69 91       	ld	r22, Y+
 4fc:	0e 94 77 00 	call	0xee	; 0xee <lcd_send>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	c5 36       	cpi	r28, 0x65	; 101
 504:	d8 07       	cpc	r29, r24
 506:	c1 f7       	brne	.-16     	; 0x4f8 <lcd_print+0x28>
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <main>:
volatile uint16_t adc_temp=0,adc_vin=0,num=0,long_press=0; //adc-enc
volatile int set_temp=0,tov0=0;
volatile uint32_t adc_sum=0,adc_avg=0,ad_smp=0,tip_temp=0;
int pwm=400;

int main(void){
 50e:	3f 92       	push	r3
 510:	4f 92       	push	r4
 512:	5f 92       	push	r5
 514:	6f 92       	push	r6
 516:	7f 92       	push	r7
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29

CLKPR=0x80;CLKPR=0x00;
 530:	80 e8       	ldi	r24, 0x80	; 128
 532:	80 93 61 00 	sts	0x0061, r24
 536:	10 92 61 00 	sts	0x0061, r1
DDRB   |= (1 << DDB1);
 53a:	21 9a       	sbi	0x04, 1	; 4
TCCR1A  =0x00;
 53c:	10 92 80 00 	sts	0x0080, r1
TCCR1B  =0x00;
 540:	10 92 81 00 	sts	0x0081, r1
TCCR1A |= (1 << COM1A1)|(1<<COM1A0);
 544:	80 91 80 00 	lds	r24, 0x0080
 548:	80 6c       	ori	r24, 0xC0	; 192
 54a:	80 93 80 00 	sts	0x0080, r24
TCCR1A |= (1 << WGM11);
 54e:	80 91 80 00 	lds	r24, 0x0080
 552:	82 60       	ori	r24, 0x02	; 2
 554:	80 93 80 00 	sts	0x0080, r24
TCCR1B |= (1 << WGM12)|(1 << WGM13);
 558:	80 91 81 00 	lds	r24, 0x0081
 55c:	88 61       	ori	r24, 0x18	; 24
 55e:	80 93 81 00 	sts	0x0081, r24
TCCR1B |= (1 << CS10);
 562:	80 91 81 00 	lds	r24, 0x0081
 566:	81 60       	ori	r24, 0x01	; 1
 568:	80 93 81 00 	sts	0x0081, r24
ICR1    = 401;
 56c:	81 e9       	ldi	r24, 0x91	; 145
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	90 93 87 00 	sts	0x0087, r25
 574:	80 93 86 00 	sts	0x0086, r24
OCR1A   = 400;
 578:	80 e9       	ldi	r24, 0x90	; 144
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	90 93 89 00 	sts	0x0089, r25
 580:	80 93 88 00 	sts	0x0088, r24


TCCR0A=0x00;
 584:	14 bc       	out	0x24, r1	; 36
TCCR0B=0x05;
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	85 bd       	out	0x25, r24	; 37
TIMSK0=(1<<TOV0);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 6e 00 	sts	0x006E, r24


ADMUX|=(1<<REFS0)|(1<<REFS1);
 590:	80 91 7c 00 	lds	r24, 0x007C
 594:	80 6c       	ori	r24, 0xC0	; 192
 596:	80 93 7c 00 	sts	0x007C, r24
ADMUX|=(1<<MUX0)|(1<<MUX1)|(1<<MUX2);
 59a:	80 91 7c 00 	lds	r24, 0x007C
 59e:	87 60       	ori	r24, 0x07	; 7
 5a0:	80 93 7c 00 	sts	0x007C, r24
ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 5a4:	80 91 7a 00 	lds	r24, 0x007A
 5a8:	87 60       	ori	r24, 0x07	; 7
 5aa:	80 93 7a 00 	sts	0x007A, r24
ADCSRA|=(1<<ADIE)|(1<<ADEN)|(1<<ADSC);
 5ae:	80 91 7a 00 	lds	r24, 0x007A
 5b2:	88 6c       	ori	r24, 0xC8	; 200
 5b4:	80 93 7a 00 	sts	0x007A, r24
sei();
 5b8:	78 94       	sei

lcd_init();
 5ba:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_init>
void lcd_cc(uint8_t x, uint8_t y, uint8_t cc){
lcd_char[x-1+(y-1)*16]=cc;
}

void lcd_backlight(uint8_t bcklt){
OCR0A=bcklt;
 5be:	80 e5       	ldi	r24, 0x50	; 80
 5c0:	87 bd       	out	0x27, r24	; 39
}

void lcd_contrast(uint8_t cntrst){
OCR0B=cntrst;
 5c2:	86 ee       	ldi	r24, 0xE6	; 230
 5c4:	88 bd       	out	0x28, r24	; 40
lcd_backlight(80);
lcd_contrast(230);

DDRD &=~((1<<2)|(1<<3)|(1<<7));
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	83 77       	andi	r24, 0x73	; 115
 5ca:	8a b9       	out	0x0a, r24	; 10
PCICR  |=(1<<PCIE2);
 5cc:	80 91 68 00 	lds	r24, 0x0068
 5d0:	84 60       	ori	r24, 0x04	; 4
 5d2:	80 93 68 00 	sts	0x0068, r24
PCMSK2 |=(1<<PCINT18)|(1<<PCINT19)|(1<<PCINT23);
 5d6:	80 91 6d 00 	lds	r24, 0x006D
 5da:	8c 68       	ori	r24, 0x8C	; 140
 5dc:	80 93 6d 00 	sts	0x006D, r24
sei();
 5e0:	78 94       	sei

while(1){
		   
		   tip_temp=ADC_VREF;
 5e2:	f8 e4       	ldi	r31, 0x48	; 72
 5e4:	ef 2e       	mov	r14, r31
 5e6:	f4 e0       	ldi	r31, 0x04	; 4
 5e8:	ff 2e       	mov	r15, r31
 5ea:	01 2d       	mov	r16, r1
 5ec:	11 2d       	mov	r17, r1
		   tip_temp/=TIP_COEF;
		   
		   
		   set_temp=encoder;
		   if     (set_temp<TEMP_LOW ){set_temp=TEMP_LOW; }
		   else if(set_temp>TEMP_HIGH){set_temp=TEMP_HIGH;}
 5ee:	e0 ee       	ldi	r30, 0xE0	; 224
 5f0:	4e 2e       	mov	r4, r30
 5f2:	e1 e0       	ldi	r30, 0x01	; 1
 5f4:	5e 2e       	mov	r5, r30
		   tip_temp/=ADC_GAIN;
		   tip_temp/=TIP_COEF;
		   
		   
		   set_temp=encoder;
		   if     (set_temp<TEMP_LOW ){set_temp=TEMP_LOW; }
 5f6:	7e e1       	ldi	r23, 0x1E	; 30
 5f8:	67 2e       	mov	r6, r23
 5fa:	71 2c       	mov	r7, r1
		   else if(set_temp>TEMP_HIGH){set_temp=TEMP_HIGH;}
		   int error=(set_temp-tip_temp);
		   pwm=(error*KP);
 5fc:	64 e1       	ldi	r22, 0x14	; 20
 5fe:	86 2e       	mov	r8, r22
 600:	91 2c       	mov	r9, r1
		   if(pwm<0){pwm=1;}
		   else if(pwm>400){pwm=400;}
 602:	50 e9       	ldi	r21, 0x90	; 144
 604:	a5 2e       	mov	r10, r21
 606:	51 e0       	ldi	r21, 0x01	; 1
 608:	b5 2e       	mov	r11, r21
		   set_temp=encoder;
		   if     (set_temp<TEMP_LOW ){set_temp=TEMP_LOW; }
		   else if(set_temp>TEMP_HIGH){set_temp=TEMP_HIGH;}
		   int error=(set_temp-tip_temp);
		   pwm=(error*KP);
		   if(pwm<0){pwm=1;}
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	c4 2e       	mov	r12, r20
 60e:	d1 2c       	mov	r13, r1
lcd_custom_char();
lcd_send(0,0x01);
}

void lcd_blank(void){
for(uint8_t i=0;i<32;i++){lcd_char[i]=' ';}
 610:	30 e2       	ldi	r19, 0x20	; 32
 612:	33 2e       	mov	r3, r19
 614:	c0 e2       	ldi	r28, 0x20	; 32
 616:	de e4       	ldi	r29, 0x4E	; 78
PCMSK2 |=(1<<PCINT18)|(1<<PCINT19)|(1<<PCINT23);
sei();

while(1){
		   
		   tip_temp=ADC_VREF;
 618:	e0 92 41 01 	sts	0x0141, r14
 61c:	f0 92 42 01 	sts	0x0142, r15
 620:	00 93 43 01 	sts	0x0143, r16
 624:	10 93 44 01 	sts	0x0144, r17
		   tip_temp*=1000;
 628:	60 91 41 01 	lds	r22, 0x0141
 62c:	70 91 42 01 	lds	r23, 0x0142
 630:	80 91 43 01 	lds	r24, 0x0143
 634:	90 91 44 01 	lds	r25, 0x0144
 638:	28 ee       	ldi	r18, 0xE8	; 232
 63a:	33 e0       	ldi	r19, 0x03	; 3
 63c:	40 e0       	ldi	r20, 0x00	; 0
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsi3>
 644:	60 93 41 01 	sts	0x0141, r22
 648:	70 93 42 01 	sts	0x0142, r23
 64c:	80 93 43 01 	sts	0x0143, r24
 650:	90 93 44 01 	sts	0x0144, r25
		   tip_temp/=1024;
 654:	80 91 41 01 	lds	r24, 0x0141
 658:	90 91 42 01 	lds	r25, 0x0142
 65c:	a0 91 43 01 	lds	r26, 0x0143
 660:	b0 91 44 01 	lds	r27, 0x0144
 664:	2a e0       	ldi	r18, 0x0A	; 10
 666:	b6 95       	lsr	r27
 668:	a7 95       	ror	r26
 66a:	97 95       	ror	r25
 66c:	87 95       	ror	r24
 66e:	2a 95       	dec	r18
 670:	d1 f7       	brne	.-12     	; 0x666 <main+0x158>
 672:	80 93 41 01 	sts	0x0141, r24
 676:	90 93 42 01 	sts	0x0142, r25
 67a:	a0 93 43 01 	sts	0x0143, r26
 67e:	b0 93 44 01 	sts	0x0144, r27
		   tip_temp*=adc_avg;
 682:	20 91 41 01 	lds	r18, 0x0141
 686:	30 91 42 01 	lds	r19, 0x0142
 68a:	40 91 43 01 	lds	r20, 0x0143
 68e:	50 91 44 01 	lds	r21, 0x0144
 692:	60 91 39 01 	lds	r22, 0x0139
 696:	70 91 3a 01 	lds	r23, 0x013A
 69a:	80 91 3b 01 	lds	r24, 0x013B
 69e:	90 91 3c 01 	lds	r25, 0x013C
 6a2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsi3>
 6a6:	60 93 41 01 	sts	0x0141, r22
 6aa:	70 93 42 01 	sts	0x0142, r23
 6ae:	80 93 43 01 	sts	0x0143, r24
 6b2:	90 93 44 01 	sts	0x0144, r25
		   tip_temp/=ADC_GAIN;
 6b6:	60 91 41 01 	lds	r22, 0x0141
 6ba:	70 91 42 01 	lds	r23, 0x0142
 6be:	80 91 43 01 	lds	r24, 0x0143
 6c2:	90 91 44 01 	lds	r25, 0x0144
 6c6:	22 e2       	ldi	r18, 0x22	; 34
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
 6d2:	c9 01       	movw	r24, r18
 6d4:	da 01       	movw	r26, r20
 6d6:	80 93 41 01 	sts	0x0141, r24
 6da:	90 93 42 01 	sts	0x0142, r25
 6de:	a0 93 43 01 	sts	0x0143, r26
 6e2:	b0 93 44 01 	sts	0x0144, r27
		   tip_temp/=TIP_COEF;
 6e6:	60 91 41 01 	lds	r22, 0x0141
 6ea:	70 91 42 01 	lds	r23, 0x0142
 6ee:	80 91 43 01 	lds	r24, 0x0143
 6f2:	90 91 44 01 	lds	r25, 0x0144
 6f6:	2c e3       	ldi	r18, 0x3C	; 60
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	0e 94 11 05 	call	0xa22	; 0xa22 <__udivmodsi4>
 702:	c9 01       	movw	r24, r18
 704:	da 01       	movw	r26, r20
 706:	80 93 41 01 	sts	0x0141, r24
 70a:	90 93 42 01 	sts	0x0142, r25
 70e:	a0 93 43 01 	sts	0x0143, r26
 712:	b0 93 44 01 	sts	0x0144, r27
		   
		   
		   set_temp=encoder;
 716:	80 91 25 01 	lds	r24, 0x0125
 71a:	90 91 26 01 	lds	r25, 0x0126
 71e:	90 93 32 01 	sts	0x0132, r25
 722:	80 93 31 01 	sts	0x0131, r24
		   if     (set_temp<TEMP_LOW ){set_temp=TEMP_LOW; }
 726:	80 91 31 01 	lds	r24, 0x0131
 72a:	90 91 32 01 	lds	r25, 0x0132
 72e:	4e 97       	sbiw	r24, 0x1e	; 30
 730:	2c f4       	brge	.+10     	; 0x73c <main+0x22e>
 732:	70 92 32 01 	sts	0x0132, r7
 736:	60 92 31 01 	sts	0x0131, r6
 73a:	0b c0       	rjmp	.+22     	; 0x752 <main+0x244>
		   else if(set_temp>TEMP_HIGH){set_temp=TEMP_HIGH;}
 73c:	80 91 31 01 	lds	r24, 0x0131
 740:	90 91 32 01 	lds	r25, 0x0132
 744:	81 5e       	subi	r24, 0xE1	; 225
 746:	91 40       	sbci	r25, 0x01	; 1
 748:	24 f0       	brlt	.+8      	; 0x752 <main+0x244>
 74a:	50 92 32 01 	sts	0x0132, r5
 74e:	40 92 31 01 	sts	0x0131, r4
		   int error=(set_temp-tip_temp);
 752:	20 91 31 01 	lds	r18, 0x0131
 756:	30 91 32 01 	lds	r19, 0x0132
 75a:	80 91 41 01 	lds	r24, 0x0141
 75e:	90 91 42 01 	lds	r25, 0x0142
 762:	a0 91 43 01 	lds	r26, 0x0143
 766:	b0 91 44 01 	lds	r27, 0x0144
		   pwm=(error*KP);
 76a:	28 1b       	sub	r18, r24
 76c:	39 0b       	sbc	r19, r25
 76e:	28 9d       	mul	r18, r8
 770:	c0 01       	movw	r24, r0
 772:	29 9d       	mul	r18, r9
 774:	90 0d       	add	r25, r0
 776:	38 9d       	mul	r19, r8
 778:	90 0d       	add	r25, r0
 77a:	11 24       	eor	r1, r1
 77c:	90 93 21 01 	sts	0x0121, r25
 780:	80 93 20 01 	sts	0x0120, r24
		   if(pwm<0){pwm=1;}
 784:	97 ff       	sbrs	r25, 7
 786:	05 c0       	rjmp	.+10     	; 0x792 <main+0x284>
 788:	d0 92 21 01 	sts	0x0121, r13
 78c:	c0 92 20 01 	sts	0x0120, r12
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <main+0x292>
		   else if(pwm>400){pwm=400;}
 792:	81 59       	subi	r24, 0x91	; 145
 794:	91 40       	sbci	r25, 0x01	; 1
 796:	24 f0       	brlt	.+8      	; 0x7a0 <main+0x292>
 798:	b0 92 21 01 	sts	0x0121, r11
 79c:	a0 92 20 01 	sts	0x0120, r10
		   OCR1A=pwm;
 7a0:	80 91 20 01 	lds	r24, 0x0120
 7a4:	90 91 21 01 	lds	r25, 0x0121
 7a8:	90 93 89 00 	sts	0x0089, r25
 7ac:	80 93 88 00 	sts	0x0088, r24
 7b0:	e5 e4       	ldi	r30, 0x45	; 69
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	31 92       	st	Z+, r3
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	e5 36       	cpi	r30, 0x65	; 101
 7ba:	f8 07       	cpc	r31, r24
 7bc:	d9 f7       	brne	.-10     	; 0x7b4 <main+0x2a6>
		   
		   
		   lcd_blank();
		   Set_temp(1,1,set_temp);
 7be:	40 91 31 01 	lds	r20, 0x0131
 7c2:	50 91 32 01 	lds	r21, 0x0132
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	0e 94 0a 02 	call	0x414	; 0x414 <Set_temp>
		   Iron_temp(10,1,tip_temp);
 7ce:	20 91 41 01 	lds	r18, 0x0141
 7d2:	30 91 42 01 	lds	r19, 0x0142
 7d6:	40 91 43 01 	lds	r20, 0x0143
 7da:	50 91 44 01 	lds	r21, 0x0144
 7de:	8a e0       	ldi	r24, 0x0A	; 10
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	a9 01       	movw	r20, r18
 7e4:	0e 94 c1 01 	call	0x382	; 0x382 <Iron_temp>
		   PWM_out(10,2,pwm);
 7e8:	40 91 20 01 	lds	r20, 0x0120
 7ec:	50 91 21 01 	lds	r21, 0x0121
 7f0:	8a e0       	ldi	r24, 0x0A	; 10
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <PWM_out>
		   lcd_print();
 7f8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_print>
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <main+0x2f0>
 802:	0a cf       	rjmp	.-492    	; 0x618 <main+0x10a>

00000804 <__vector_5>:
		   }

}


ISR(PCINT2_vect){
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	2f 93       	push	r18
 810:	8f 93       	push	r24
 812:	9f 93       	push	r25
uint8_t TEMP=(PIND & 0b10001100)>>2;
 814:	89 b1       	in	r24, 0x09	; 9
 816:	86 95       	lsr	r24
 818:	86 95       	lsr	r24
 81a:	83 72       	andi	r24, 0x23	; 35
CLK=(TEMP & 0b00000001);
 81c:	28 2f       	mov	r18, r24
 81e:	21 70       	andi	r18, 0x01	; 1
 820:	20 93 23 01 	sts	0x0123, r18
DAT=(TEMP & 0b00100000)>>5;
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	25 e0       	ldi	r18, 0x05	; 5
 828:	96 95       	lsr	r25
 82a:	87 95       	ror	r24
 82c:	2a 95       	dec	r18
 82e:	e1 f7       	brne	.-8      	; 0x828 <__vector_5+0x24>
 830:	80 93 24 01 	sts	0x0124, r24
if(CLK!=CLK_L){if(DAT!=CLK){encoder++;}else{encoder--;}}
 834:	90 91 23 01 	lds	r25, 0x0123
 838:	80 91 22 01 	lds	r24, 0x0122
 83c:	98 17       	cp	r25, r24
 83e:	a9 f0       	breq	.+42     	; 0x86a <__vector_5+0x66>
 840:	90 91 24 01 	lds	r25, 0x0124
 844:	80 91 23 01 	lds	r24, 0x0123
 848:	98 17       	cp	r25, r24
 84a:	31 f0       	breq	.+12     	; 0x858 <__vector_5+0x54>
 84c:	80 91 25 01 	lds	r24, 0x0125
 850:	90 91 26 01 	lds	r25, 0x0126
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	05 c0       	rjmp	.+10     	; 0x862 <__vector_5+0x5e>
 858:	80 91 25 01 	lds	r24, 0x0125
 85c:	90 91 26 01 	lds	r25, 0x0126
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	90 93 26 01 	sts	0x0126, r25
 866:	80 93 25 01 	sts	0x0125, r24
if(TEMP & 0b00001000){if(tov0>7800){long_press=1;}}else{push++;TCNT0=0;tov0=0;long_press=0;}
 86a:	80 91 27 01 	lds	r24, 0x0127
 86e:	90 91 28 01 	lds	r25, 0x0128
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	90 93 28 01 	sts	0x0128, r25
 878:	80 93 27 01 	sts	0x0127, r24
 87c:	16 bc       	out	0x26, r1	; 38
 87e:	10 92 34 01 	sts	0x0134, r1
 882:	10 92 33 01 	sts	0x0133, r1
 886:	10 92 30 01 	sts	0x0130, r1
 88a:	10 92 2f 01 	sts	0x012F, r1
CLK_L=CLK;
 88e:	80 91 23 01 	lds	r24, 0x0123
 892:	80 93 22 01 	sts	0x0122, r24
}
 896:	9f 91       	pop	r25
 898:	8f 91       	pop	r24
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <__vector_21>:

ISR(ADC_vect){
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
adc_temp=ADCW;
 8c0:	80 91 78 00 	lds	r24, 0x0078
 8c4:	90 91 79 00 	lds	r25, 0x0079
 8c8:	90 93 2a 01 	sts	0x012A, r25
 8cc:	80 93 29 01 	sts	0x0129, r24
adc_sum+=adc_temp;
 8d0:	20 91 35 01 	lds	r18, 0x0135
 8d4:	30 91 36 01 	lds	r19, 0x0136
 8d8:	40 91 37 01 	lds	r20, 0x0137
 8dc:	50 91 38 01 	lds	r21, 0x0138
 8e0:	80 91 29 01 	lds	r24, 0x0129
 8e4:	90 91 2a 01 	lds	r25, 0x012A
 8e8:	a0 e0       	ldi	r26, 0x00	; 0
 8ea:	b0 e0       	ldi	r27, 0x00	; 0
 8ec:	82 0f       	add	r24, r18
 8ee:	93 1f       	adc	r25, r19
 8f0:	a4 1f       	adc	r26, r20
 8f2:	b5 1f       	adc	r27, r21
 8f4:	80 93 35 01 	sts	0x0135, r24
 8f8:	90 93 36 01 	sts	0x0136, r25
 8fc:	a0 93 37 01 	sts	0x0137, r26
 900:	b0 93 38 01 	sts	0x0138, r27
ad_smp++;
 904:	80 91 3d 01 	lds	r24, 0x013D
 908:	90 91 3e 01 	lds	r25, 0x013E
 90c:	a0 91 3f 01 	lds	r26, 0x013F
 910:	b0 91 40 01 	lds	r27, 0x0140
 914:	01 96       	adiw	r24, 0x01	; 1
 916:	a1 1d       	adc	r26, r1
 918:	b1 1d       	adc	r27, r1
 91a:	80 93 3d 01 	sts	0x013D, r24
 91e:	90 93 3e 01 	sts	0x013E, r25
 922:	a0 93 3f 01 	sts	0x013F, r26
 926:	b0 93 40 01 	sts	0x0140, r27
if(ad_smp>AVG_SMPL){adc_avg=adc_sum/AVG_SMPL;adc_sum=0;ad_smp=0;}
 92a:	80 91 3d 01 	lds	r24, 0x013D
 92e:	90 91 3e 01 	lds	r25, 0x013E
 932:	a0 91 3f 01 	lds	r26, 0x013F
 936:	b0 91 40 01 	lds	r27, 0x0140
 93a:	81 38       	cpi	r24, 0x81	; 129
 93c:	91 05       	cpc	r25, r1
 93e:	a1 05       	cpc	r26, r1
 940:	b1 05       	cpc	r27, r1
 942:	38 f1       	brcs	.+78     	; 0x992 <__stack+0x93>
 944:	80 91 35 01 	lds	r24, 0x0135
 948:	90 91 36 01 	lds	r25, 0x0136
 94c:	a0 91 37 01 	lds	r26, 0x0137
 950:	b0 91 38 01 	lds	r27, 0x0138
 954:	37 e0       	ldi	r19, 0x07	; 7
 956:	b6 95       	lsr	r27
 958:	a7 95       	ror	r26
 95a:	97 95       	ror	r25
 95c:	87 95       	ror	r24
 95e:	3a 95       	dec	r19
 960:	d1 f7       	brne	.-12     	; 0x956 <__stack+0x57>
 962:	80 93 39 01 	sts	0x0139, r24
 966:	90 93 3a 01 	sts	0x013A, r25
 96a:	a0 93 3b 01 	sts	0x013B, r26
 96e:	b0 93 3c 01 	sts	0x013C, r27
 972:	10 92 35 01 	sts	0x0135, r1
 976:	10 92 36 01 	sts	0x0136, r1
 97a:	10 92 37 01 	sts	0x0137, r1
 97e:	10 92 38 01 	sts	0x0138, r1
 982:	10 92 3d 01 	sts	0x013D, r1
 986:	10 92 3e 01 	sts	0x013E, r1
 98a:	10 92 3f 01 	sts	0x013F, r1
 98e:	10 92 40 01 	sts	0x0140, r1
ADCSRA|=(1<<ADSC);
 992:	80 91 7a 00 	lds	r24, 0x007A
 996:	80 64       	ori	r24, 0x40	; 64
 998:	80 93 7a 00 	sts	0x007A, r24
}
 99c:	bf 91       	pop	r27
 99e:	af 91       	pop	r26
 9a0:	9f 91       	pop	r25
 9a2:	8f 91       	pop	r24
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_16>:

ISR(TIMER0_OVF_vect){
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	8f 93       	push	r24
 9c2:	9f 93       	push	r25
tov0++;
 9c4:	80 91 33 01 	lds	r24, 0x0133
 9c8:	90 91 34 01 	lds	r25, 0x0134
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	90 93 34 01 	sts	0x0134, r25
 9d2:	80 93 33 01 	sts	0x0133, r24
 9d6:	9f 91       	pop	r25
 9d8:	8f 91       	pop	r24
 9da:	0f 90       	pop	r0
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	0f 90       	pop	r0
 9e0:	1f 90       	pop	r1
 9e2:	18 95       	reti

000009e4 <__mulsi3>:
 9e4:	62 9f       	mul	r22, r18
 9e6:	d0 01       	movw	r26, r0
 9e8:	73 9f       	mul	r23, r19
 9ea:	f0 01       	movw	r30, r0
 9ec:	82 9f       	mul	r24, r18
 9ee:	e0 0d       	add	r30, r0
 9f0:	f1 1d       	adc	r31, r1
 9f2:	64 9f       	mul	r22, r20
 9f4:	e0 0d       	add	r30, r0
 9f6:	f1 1d       	adc	r31, r1
 9f8:	92 9f       	mul	r25, r18
 9fa:	f0 0d       	add	r31, r0
 9fc:	83 9f       	mul	r24, r19
 9fe:	f0 0d       	add	r31, r0
 a00:	74 9f       	mul	r23, r20
 a02:	f0 0d       	add	r31, r0
 a04:	65 9f       	mul	r22, r21
 a06:	f0 0d       	add	r31, r0
 a08:	99 27       	eor	r25, r25
 a0a:	72 9f       	mul	r23, r18
 a0c:	b0 0d       	add	r27, r0
 a0e:	e1 1d       	adc	r30, r1
 a10:	f9 1f       	adc	r31, r25
 a12:	63 9f       	mul	r22, r19
 a14:	b0 0d       	add	r27, r0
 a16:	e1 1d       	adc	r30, r1
 a18:	f9 1f       	adc	r31, r25
 a1a:	bd 01       	movw	r22, r26
 a1c:	cf 01       	movw	r24, r30
 a1e:	11 24       	eor	r1, r1
 a20:	08 95       	ret

00000a22 <__udivmodsi4>:
 a22:	a1 e2       	ldi	r26, 0x21	; 33
 a24:	1a 2e       	mov	r1, r26
 a26:	aa 1b       	sub	r26, r26
 a28:	bb 1b       	sub	r27, r27
 a2a:	fd 01       	movw	r30, r26
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__udivmodsi4_ep>

00000a2e <__udivmodsi4_loop>:
 a2e:	aa 1f       	adc	r26, r26
 a30:	bb 1f       	adc	r27, r27
 a32:	ee 1f       	adc	r30, r30
 a34:	ff 1f       	adc	r31, r31
 a36:	a2 17       	cp	r26, r18
 a38:	b3 07       	cpc	r27, r19
 a3a:	e4 07       	cpc	r30, r20
 a3c:	f5 07       	cpc	r31, r21
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__udivmodsi4_ep>
 a40:	a2 1b       	sub	r26, r18
 a42:	b3 0b       	sbc	r27, r19
 a44:	e4 0b       	sbc	r30, r20
 a46:	f5 0b       	sbc	r31, r21

00000a48 <__udivmodsi4_ep>:
 a48:	66 1f       	adc	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	1a 94       	dec	r1
 a52:	69 f7       	brne	.-38     	; 0xa2e <__udivmodsi4_loop>
 a54:	60 95       	com	r22
 a56:	70 95       	com	r23
 a58:	80 95       	com	r24
 a5a:	90 95       	com	r25
 a5c:	9b 01       	movw	r18, r22
 a5e:	ac 01       	movw	r20, r24
 a60:	bd 01       	movw	r22, r26
 a62:	cf 01       	movw	r24, r30
 a64:	08 95       	ret

00000a66 <_exit>:
 a66:	f8 94       	cli

00000a68 <__stop_program>:
 a68:	ff cf       	rjmp	.-2      	; 0xa68 <__stop_program>
